# Griffin IDE Build Process Guide

## Overview for AI Assistant

This document provides essential guidance for managing the build process of Griffin IDE, a specialized fork of Visual Studio Code. As an AI system assisting with this project, your role includes helping to modify the build configuration and ensure proper compilation across different platforms.

## Build Environment Setup

### Development Environment Requirements

The build environment requires specific tools and configurations. The base requirements include:

```bash
# Required versions
Node.js: >=16.x
Python: >=3.7
Git: Latest stable version

# Global dependencies
npm install -g yarn
npm install -g node-gyp
```

### Repository Configuration

The build process begins with proper repository configuration:

```bash
# Initial setup
git clone [GRIFFIN_REPO_URL]
cd griffin-ide
git checkout main

# Install dependencies
yarn install

# Configure build environment
yarn run build-init
```

## Build Process Modifications

### Custom Build Scripts

The standard VSCode build scripts need modification to incorporate Griffin-specific requirements. Key files to modify:

```typescript
// build/gulpfile.js
const griffinConfig = {
    productName: 'Griffin IDE',
    appId: 'com.griffin.ide',
    copyright: 'Copyright Â© 2025',
    griffinAssets: path.join(__dirname, 'griffin-assets')
};

gulp.task('griffin-compile', async () => {
    // Custom compilation steps
    await compile();
    await packageGriffinAssets();
    await configurePythonEnv();
});
```

### Python Integration

Special attention is needed for Python and Jupyter integration:

```json
// package.json
{
    "scripts": {
        "setup-python": "node scripts/setup-python-env.js",
        "package-jupyter": "node scripts/package-jupyter.js"
    },
    "griffinDependencies": {
        "jupyterlab": "^3.0.0",
        "notebook": "^6.4.0"
    }
}
```

## Platform-Specific Considerations

### Windows Build Configuration

Windows builds require specific configurations:

```json
{
    "win32": {
        "target": ["nsis", "portable"],
        "icon": "resources/win32/griffin.ico",
        "certificateFile": "griffin-windows-cert.pfx",
        "publisherName": "Griffin Analytics"
    }
}
```

### macOS Build Configuration

macOS builds need special handling:

```json
{
    "mac": {
        "category": "public.app-category.developer-tools",
        "icon": "resources/darwin/griffin.icns",
        "hardenedRuntime": true,
        "gatekeeperAssess": false,
        "entitlements": "resources/darwin/entitlements.plist"
    }
}
```

### Linux Build Configuration

Linux builds require distribution-specific configurations:

```json
{
    "linux": {
        "target": ["deb", "rpm", "AppImage"],
        "icon": "resources/linux/griffin.png",
        "category": "Development"
    }
}
```

## Build Commands and Scripts

### Development Builds

For development and testing:

```bash
# Start development build with watch
yarn run watch

# Run specific component builds
yarn run compile-extensions
yarn run compile-web
yarn run compile-electron

# Build with Griffin customizations
yarn run griffin-dev-build
```

### Production Builds

For creating production releases:

```bash
# Full production build
yarn run griffin-production

# Platform-specific builds
yarn run griffin-windows
yarn run griffin-mac
yarn run griffin-linux

# Create installers
yarn run create-installers
```

## Continuous Integration Setup

### GitHub Actions Configuration

```yaml
name: Griffin IDE Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'
    - name: Install dependencies
      run: |
        npm install -g yarn
        yarn install
    - name: Build Griffin IDE
      run: yarn run griffin-production
```

## Quality Assurance

### Build Verification

Essential checks for build quality:

```bash
# Run build tests
yarn run test-build

# Verify Python integration
yarn run test-python-integration

# Check packaging
yarn run verify-package
```

## Common Issues and Solutions

### Build Environment Issues

Common problems and their solutions:

1. Node.js version mismatches:
```bash
nvm install 16
nvm use 16
rm -rf node_modules
yarn install
```

2. Python environment conflicts:
```bash
python -m venv griffin-env
source griffin-env/bin/activate
pip install -r requirements.txt
```

### Platform-Specific Issues

Problems that may occur on specific platforms:

Windows:
```powershell
# Fix Windows build errors
npm config set msvs_version 2019
npm config set python python2.7
```

macOS:
```bash
# Fix macOS signing issues
security unlock-keychain login.keychain
codesign --force --deep --sign - ./dist/griffin.app
```

## Distribution Preparation

### Release Packaging

Steps for preparing releases:

```bash
# Create distribution package
yarn run create-dist

# Generate checksums
yarn run generate-checksums

# Prepare update files
yarn run prepare-updates
```

## Important Notes for AI Implementation

When implementing these build processes:

1. Environment Configuration: Ensure all build scripts properly reference the modified Griffin IDE configurations rather than the original VSCode settings.

2. Python Integration: The build process must properly bundle the Python environment and required libraries for marketing analytics.

3. Branding Assets: Verify that all Griffin branding assets are properly included in the build process and replace VSCode branding.

4. Cross-Platform Testing: Each build should be tested on all target platforms to ensure consistency and functionality.

5. Performance Optimization: Build configurations should be optimized for marketing analytics workflows rather than general development tasks.

Remember to maintain detailed logs of any modifications made to the build process, as these will be essential for future maintenance and updates.